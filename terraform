// main.tf

// Configuração do provider - AWS
// Define a região da AWS a ser utilizada para a implantação dos recursos
provider "aws" {
  region = var.region
}

// Configurações do Terraform
// Especifica o provider necessário e sua versão
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
  required_version = ">= 1.0.0"

  // Backend S3 - Armazenamento do state no S3
  backend "s3" {
    bucket         = var.s3_bucket
    key            = var.s3_key
    region         = var.region
    dynamodb_table = var.dynamodb_table
    encrypt        = true
  }
}

// Recurso de Security Group
// Cria um Security Group para o AWS WorkSpaces com as regras de entrada e saída especificadas
resource "aws_security_group" "workspaces_sg" {
  name        = var.sg_name
  description = "SG para AWS WorkSpaces"
  vpc_id      = var.vpc_id

  // Tags associadas ao Security Group
  tags = {
    POC        = var.tag_poc
    Workspace  = var.tag_workspace
    Repositorio = var.tag_repositorio
  }

  // Regras de entrada dinâmicas
  dynamic "ingress" {
    for_each = var.rules_ingress
    content {
      from_port   = ingress.value.port
      to_port     = ingress.value.port
      protocol    = ingress.value.protocol
      cidr_blocks = ingress.value.source_ips
      description = ingress.value.description
    }
  }

  // Regras de saída dinâmicas
  dynamic "egress" {
    for_each = var.rules_egress
    content {
      from_port   = egress.value.port
      to_port     = egress.value.port
      protocol    = egress.value.protocol
      cidr_blocks = egress.value.destination_ips
      description = egress.value.description
    }
  }
}

// data.tf

// Obtém o ID da conta AWS e a região configurada
data "aws_caller_identity" "current" {}

data "aws_region" "current" {}

output "account_id" {
  description = "ID da conta AWS atual"
  value       = data.aws_caller_identity.current.account_id
}

output "current_region" {
  description = "Região configurada"
  value       = data.aws_region.current.name
}


// outputs.tf

// Output do ID do Security Group para referência e uso em outros módulos ou recursos
output "security_group_id" {
  description = "O ID do Security Group criado"
  value       = aws_security_group.workspaces_sg.id
}


// variables.tf

// Define a região da AWS a ser utilizada
variable "region" {
  description = "Região da AWS"
  type        = string
  default     = "us-east-1"
}

// Nome do Security Group
variable "sg_name" {
  description = "Nome do Security Group"
  type        = string
  default     = "workspaces-sg"
}

// ID da VPC onde o Security Group será criado
variable "vpc_id" {
  description = "ID da VPC"
  type        = string
}

// Tags do projeto
variable "tag_poc" {
  description = "Tag POC"
  type        = string
  default     = "AWS"
}

variable "tag_workspace" {
  description = "Tag Workspace"
  type        = string
  default     = "Agências"
}

variable "tag_repositorio" {
  description = "Tag Repositório"
  type        = string
  default     = "https://xxxx.com.br"
}

// Regras de entrada
variable "rules_ingress" {
  description = "Regras de entrada com porta, protocolo, IPs de origem e descrição"
  type        = list(object({
    port       = number
    protocol   = string
    source_ips = list(string)
    description = string
  }))
  default = [
    { port = 3389, protocol = "tcp", source_ips = ["192.168.0.1/32"], description = "RDP Access" },
    { port = 8443, protocol = "tcp", source_ips = ["192.168.0.2/32"], description = "HTTPS Access" }
  ]
}

// Regras de saída
variable "rules_egress" {
  description = "Regras de saída com porta, protocolo, IPs de destino e descrição"
  type        = list(object({
    port          = number
    protocol      = string
    destination_ips = list(string)
    description   = string
  }))
  default = [
    { port = 80, protocol = "tcp", destination_ips = ["0.0.0.0/0"], description = "HTTP Outbound" },
    { port = 443, protocol = "tcp", destination_ips = ["0.0.0.0/0"], description = "HTTPS Outbound" }
  ]
}

// Variáveis para o backend S3
variable "s3_bucket" {
  description = "Nome do bucket S3 onde o state será armazenado"
  type        = string
}

variable "s3_key" {
  description = "Caminho do arquivo state no S3"
  type        = string
}

variable "dynamodb_table" {
  description = "Tabela DynamoDB para controle de locking do state"
  type        = string
}


// terraform.tfvars

// Exemplo de como definir valores para as variáveis
region   = "us-east-1"
sg_name  = "workspaces-sg"
vpc_id   = "vpc-12345678"
s3_bucket = "meu-bucket-terraform-state"
s3_key    = "terraform/state.tfstate"
dynamodb_table = "terraform-lock"
tag_poc = "AWS"
tag_workspace = "Agências"
tag_repositorio = "https://xxxx.com.br"
rules_ingress = [
  { port = 3389, protocol = "tcp", source_ips = ["192.168.0.1/32"], description = "RDP Access" },
  { port = 8443, protocol = "tcp", source_ips = ["192.168.0.2/32"], description = "HTTPS Access" }
]
rules_egress = [
  { port = 80, protocol = "tcp", destination_ips = ["0.0.0.0/0"], description = "HTTP Outbound" },
  { port = 443, protocol = "tcp", destination_ips = ["0.0.0.0/0"], description = "HTTPS Outbound" }
]



########################################
# providers.tf - Define o provedor AWS e a região
########################################
provider "aws" {
  region = var.aws_region # Define a região da AWS a ser usada
}

########################################
# variables.tf - Variáveis de entrada parametrizáveis
########################################

# Região da AWS (ex: us-east-1)
variable "aws_region" {
  type        = string
  description = "Região da AWS"
}

# ID do AD Connector (diretório do WorkSpaces)
variable "directory_id" {
  type        = string
  description = "ID do AD Connector"
}

# ID do Bundle (ex: Windows 10 Value)
variable "bundle_id" {
  type        = string
  description = "ID do bundle do WorkSpaces"
}

# Nome do usuário que receberá o WorkSpace
variable "username" {
  type        = string
  description = "Usuário do AD que receberá o WorkSpace"
}

# Lista de Security Groups (usar apenas 1 aqui, pois a AWS aceita somente 1 no recurso)
variable "security_group_ids" {
  type        = list(string)
  description = "Lista de Security Groups a aplicar no WorkSpaces (usar apenas o primeiro da lista)"
}

# Nome da IAM Role que será associada ao Instance Profile do WorkSpaces
variable "iam_role_name" {
  type        = string
  description = "Nome da IAM Role que será usada no Instance Profile"
}

########################################
# terraform.tfvars - Valores reais usados nas variáveis
########################################
# Exemplo de valores a serem usados nas variáveis acima
# aws_region        = "us-east-1"
# directory_id      = "d-xxxxxxxxxx"
# bundle_id         = "wsb-xxxxxxxxx"
# username          = "sidney.pereira"
# security_group_ids = ["sg-01aaa..."]
# iam_role_name     = "AmazonWorkspacesDefaultRole"

########################################
# data.tf - Obtenção automática da VPC default
########################################
data "aws_vpc" "default" {
  default = true # Busca a VPC padrão da conta
}

########################################
# main.tf - Recursos principais do projeto
########################################

# Cria um Instance Profile com a Role informada
resource "aws_iam_instance_profile" "workspaces_profile" {
  name = "workspaces-profile-${var.username}" # Nome dinâmico baseado no usuário
  role = var.iam_role_name # Nome da Role IAM a ser usada
}

# Cria o WorkSpace com todas as opções configuráveis
resource "aws_workspaces_workspace" "this" {
  directory_id = var.directory_id # Diretório AD (AD Connector)
  bundle_id    = var.bundle_id    # Bundle (tipo de máquina)
  user_name    = var.username     # Usuário que receberá o WorkSpace

  root_volume_encryption_enabled = false # Desativa criptografia do disco raiz
  user_volume_encryption_enabled = false # Desativa criptografia do disco do usuário
  volume_encryption_key          = null  # Chave KMS customizada (não usada aqui)

  workspace_properties {
    compute_type_name                         = "STANDARD" # Tipo de instância
    root_volume_size_gib                      = 80         # Tamanho do disco raiz
    user_volume_size_gib                      = 10         # Tamanho do disco do usuário
    running_mode                              = "AUTO_STOP" # Modo de operação
    running_mode_auto_stop_timeout_in_minutes = 60         # Tempo para auto-stop
  }

  workspace_creation_properties {
    custom_security_group_id    = var.security_group_ids[0] # SG customizado (usar apenas 1)
    default_ou                  = null # OU padrão (não usada)
    enable_internet_access      = false # Sem acesso à internet
    enable_maintenance_mode     = true  # Ativa modo de manutenção
    user_enabled_as_local_admin = false # Usuário não é admin local
    enable_work_docs            = false # Desativa WorkDocs
    enable_monitoring           = false # Desativa monitoramento
    dedicated_tenancy           = false # Sem tenancy dedicado
  }

  tags = {
    Name         = "Workspace-${var.username}" # Nome do recurso
    Projeto      = "POC" # Projeto
    Ambiente     = "DEV" # Ambiente
    CriadoPor    = "Terraform" # Origem da criação
  }

  depends_on = [aws_iam_instance_profile.workspaces_profile] # Garante ordem de criação
}

########################################
# outputs.tf - Resultados após o apply
########################################

# Output do ID do WorkSpace criado
output "workspace_id" {
  value       = aws_workspaces_workspace.this.id
  description = "ID do WorkSpace criado"
}

# Output do nome do Instance Profile
output "instance_profile_name" {
  value       = aws_iam_instance_profile.workspaces_profile.name
}


--------------------------
main.tf

resource "aws_instance" "this" {
  ami                    = data.aws_ami.amazon_linux.id
  instance_type          = "t3.micro"
  subnet_id              = var.subnet_id
  vpc_security_group_ids = [var.security_group_id]
  key_name               = var.key_pair_name

  tags = {
    Name = "terraform-ec2-t3micro"
  }
}

data "aws_ami" "amazon_linux" {
  most_recent = true
  owners      = ["amazon"]

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm-*-x86_64-gp2"]
  }

  filter {
    name   = "architecture"
    values = ["x86_64"]
  }
}

resource "aws_security_group" "default" {
  count  = var.security_group_id == "" ? 1 : 0
  name   = "sg-default-teste"
  vpc_id = var.vpc_id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

vpc_security_group_ids = var.security_group_id != "" ? [var.security_group_id] : [aws_security_group.default[0].id]


----------------------
variables.tf

variable "vpc_id" {
  type        = string
  description = "ID da VPC onde a instância será criada"
}

variable "subnet_id" {
  type        = string
  description = "ID da subnet onde a instância será criada"
}

variable "key_pair_name" {
  type        = string
  description = "Nome do par de chaves SSH"
}

variable "security_group_id" {
  type        = string
  description = "ID do Security Group"
}

--------------------
terraform.tfvars
vpc_id            = "vpc-0abc123def4567890"
subnet_id         = "subnet-0abc123def4567890"
key_pair_name     = "minha-chave-ec2"
security_group_id = "sg-0123456789abcdef0"

--------------------
outputs.tf
output "instance_id" {
  description = "ID da instância EC2"
  value       = aws_instance.this.id
}

output "public_ip" {
  description = "IP público da instância"
  value       = aws_instance.this.public_ip
}
-------------------------------------
#!/bin/bash

AD_IPS=("10.87.188.148" "10.87.188.36")

# Portas TCP comumente usadas pelo Active Directory
PORTAS_TCP=(
  53 88 135 137 138 139 389 445 464 636 3268 3269 49152 65535
)

# Portas UDP comumente usadas pelo Active Directory
PORTAS_UDP=(
  53 88 123 137 138 389 464
)

echo "Iniciando testes de conectividade com servidores AD..."

for ip in "${AD_IPS[@]}"; do
  echo -e "\n=============================="
  echo "🔍 Testando IP: $ip"
  echo "=============================="

  echo -e "\n--- Teste TCP (via /dev/tcp) ---"
  for porta in "${PORTAS_TCP[@]}"; do
    timeout 2 bash -c "echo > /dev/tcp/$ip/$porta" 2>/dev/null \
      && echo "✅ TCP $porta: ABERTA" \
      || echo "❌ TCP $porta: FECHADA ou FILTRADA"
  done

  echo -e "\n--- Teste UDP (via nmap) ---"
  # Concatena as portas UDP em uma string separada por vírgula
  PORTAS_UDP_STR=$(IFS=, ; echo "${PORTAS_UDP[*]}")
  nmap -sU -p "$PORTAS_UDP_STR" --open -Pn "$ip" | grep -E "udp|open|filtered|closed"
done

-------------------------------------------------

# IPs do Active Directory
$adIps = @("10.87.188.148", "10.87.188.36")

# Portas TCP utilizadas pelo Active Directory
$tcpPorts = @(53, 88, 135, 137, 138, 139, 389, 445, 464, 636, 3268, 3269, 49152, 65535)

# Portas UDP utilizadas pelo Active Directory
$udpPorts = @(53, 88, 123, 137, 138, 389, 464)

Write-Host "Iniciando teste de conectividade com servidores AD..." -ForegroundColor Cyan

foreach ($ip in $adIps) {
    Write-Host "`n==============================" -ForegroundColor Yellow
    Write-Host "🔍 Testando IP: $ip" -ForegroundColor Green
    Write-Host "==============================" -ForegroundColor Yellow

    Write-Host "`n--- Testando TCP ---" -ForegroundColor Cyan
    foreach ($port in $tcpPorts) {
        $result = Test-NetConnection -ComputerName $ip -Port $port -WarningAction SilentlyContinue
        if ($result.TcpTestSucceeded) {
            Write-Host "✅ TCP $port: ABERTA" -ForegroundColor Green
        } else {
            Write-Host "❌ TCP $port: FECHADA ou FILTRADA" -ForegroundColor Red
        }
    }

    Write-Host "`n--- Testando UDP (com nmap) ---" -ForegroundColor Cyan
    $udpPortString = $udpPorts -join ","
    $nmapResult = nmap -sU -p $udpPortString -Pn $ip
    $nmapResult | Where-Object { $_ -match "udp" -or $_ -match "open" -or $_ -match "filtered" -or $_ -match "closed" } | ForEach-Object { Write-Host $_ }
}


